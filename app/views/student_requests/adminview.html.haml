- unless session[:uin].nil?
  = render 'layouts/login'
%h1
  Admin Dashboard Page
= link_to '<button type="button" class="regularbutton">More Actions</button>'.html_safe, student_requests_adminprivileges_path
%h2= "Howdy! Welcome back #{session_get(:name)} "
= form_tag student_requests_adminview_path, :method => :get do
  %h4
  .filter_form1
    %strong Filter Requests - State:
    %br
    %table
      %tbody
        %tr
        - @all_states.each do |state|
          %td= check_box_tag "state_sel[#{state}]", 'true', @state_selected[state]
          %td= state
        %tr
        - @all_semesters.each do |semester|
          %td= check_box_tag "semester_sel[#{semester}]", 'true', @semester_selected[semester]
          %td= semester
    = submit_tag 'Refresh', class: "filter"

- @allcourses.each do |course|
  - if @coursestudentlist[course].length != 0
    %h4
    %input{:onclick => "return toggleMe('student_requests_#{course}')", :type => "button", :value => "CSCE #{course}", :class => "course_id_button"}
    %div{:id => "student_requests_#{course}"}
      = form_tag(student_requests_multiupdate_path(), method: "put") do
        %table#student_requests.sortableadmin
          %thead
            %tr
              %th
              %th UIN
              %th Full Name
              %th Major
              %th Class
              %th Minor
              %th Section
              %th Expected Graduation
              %th Creation date
              %th State
              %th Memos
              %th Actions



          %tbody
            - @coursestudentlist[course].each do |record|
              %tr{:class => "#{cycle('oddrow', 'evenrow')}"}
                %td= check_box_tag "request_ids[]", record.request_id, false, data: { "mail" => "#{record.email}"}, "sub" => course
                %td
                  %a{:onclick => "return buttonclick(#{record.uin});"} #{record.uin}
                %td= record.name
                %td= record.major
                %td= record.classification
                %td= record.minor
                %td= record.section_id
                %td= record.expected_graduation
                // %td= record.request_semester
                // %td= record.priority
                %td= record.creation_date.strftime("%Y-%m-%d %H:%M:%S")
                %td= record.state
                %td= record.notes_to_student
                %td= (link_to 'Approve', {:action => "approve", :controller => "student_requests",:id => record.request_id}, :method => :put) + "<br>".html_safe+ (link_to 'Hold', {:action => "hold", :controller => "student_requests",:id => record.request_id}, :method => :put) + "<br>".html_safe+ (link_to 'Reject', {:action => "reject", :controller => "student_requests",:id => record.request_id}, :method => :put) + "<br>".html_safe + (link_to 'Memos')


            %table{ :class => "multiUpdate" }
              %tr
                %td= select_tag("multi_state_sel", options_for_select(@allAdminStates))
                // %td= select_tag("multi_priority_sel", options_for_select(@allPriorityStates))
                %td= submit_tag "Update Selected"
                %td= link_to "Email Selected", "", :onclick => "multi_email(\"#{course}\"); return false"
              %tr{ :class => "excel_sheet"}


%p= link_to "Download the entire Force Request System data as an Excel Sheet", student_requests_getSpreadsheetAllCourses_path(format: "csv"), :id => 'download_table'
#myModal.modal
  %span.close{:onclick => "return spanclick()"} x
  .modal-content
